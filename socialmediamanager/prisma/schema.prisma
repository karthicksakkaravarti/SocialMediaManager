// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  brands        Brand[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Brand {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts SocialAccount[]
}

model SocialAccount {
  id                String   @id @default(cuid())
  platform          String   // youtube, instagram, twitter, facebook, linkedin, tiktok, etc.
  platformAccountId String   // Account ID from the platform
  platformUsername  String?  // Username/handle from the platform
  accessToken       String   @db.Text
  refreshToken      String?  @db.Text
  expiresAt         DateTime?
  scope             String?  @db.Text
  brandId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  brand Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)

  @@unique([platform, platformAccountId])
  @@index([brandId])
}
