// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  brands        Brand[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Brand {
  id          String   @id @default(cuid())
  name        String
  logo        String?
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // YouTube API Credentials (per-brand)
  youtubeClientId     String? // Google OAuth Client ID
  youtubeClientSecret String? // Encrypted Google OAuth Client Secret

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts SocialAccount[]
  videoScripts   VideoScript[]
  publishConfig  PublishConfig?
}

model SocialAccount {
  id                String   @id @default(cuid())
  platform          String   // youtube, instagram, twitter, facebook, linkedin, tiktok, etc.
  platformAccountId String   // Account ID from the platform
  platformUsername  String?  // Username/handle from the platform
  accessToken       String   @db.Text
  refreshToken      String?  @db.Text
  expiresAt         DateTime?
  scope             String?  @db.Text
  brandId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  brand          Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  videoPublishes VideoPublish[]

  @@unique([platform, platformAccountId])
  @@index([brandId])
}

// Video script storage
model VideoScript {
  id          String   @id @default(cuid())
  brandId     String

  // Script content
  title       String
  scriptJson  Json     // Full script: { title, scenes, background_music, watermark, media }

  // Scheduling
  status      String   // "draft", "scheduled", "processing", "completed", "failed"
  scheduledAt DateTime?

  // Generation result
  generatedAt DateTime?
  videoUrl    String?  // Download URL from API
  videoPath   String?  // Local path if downloaded
  duration    Float?   // Video duration in seconds

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  brand       Brand         @relation(fields: [brandId], references: [id], onDelete: Cascade)
  jobs        VideoJob[]
  publishes   VideoPublish[]

  @@index([brandId, status])
  @@index([scheduledAt])
}

// Track external API job
model VideoJob {
  id            String   @id @default(cuid())
  scriptId      String

  // API job tracking
  jobId         String   @unique  // Job ID from external API
  status        String   // "pending", "processing", "completed", "failed", "cancelled"
  progress      Float    @default(0) // 0-100
  currentScene  Int?
  totalScenes   Int?

  // Results/Errors
  videoUrl      String?
  videoPath     String?
  duration      Float?
  errorMessage  String?  @db.Text

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  script        VideoScript @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([status])
}

// Multi-channel publish tracking
model VideoPublish {
  id              String   @id @default(cuid())
  scriptId        String
  socialAccountId String

  // Publish status
  status          String   // "pending_approval", "approved", "publishing", "published", "failed"

  // YouTube result
  youtubeVideoId  String?  // YouTube video ID
  publishedAt     DateTime?
  errorMessage    String?  @db.Text

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  script          VideoScript   @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  @@unique([scriptId, socialAccountId])
  @@index([status])
}

// Per-brand publish configuration
model PublishConfig {
  id                String   @id @default(cuid())
  brandId           String   @unique

  // Settings
  requireApproval   Boolean  @default(true)   // Require manual approval before publishing
  autoPublish       Boolean  @default(false)  // Auto-publish when video completes

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  brand             Brand    @relation(fields: [brandId], references: [id], onDelete: Cascade)
}
